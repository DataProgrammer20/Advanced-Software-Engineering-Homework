Question 2: parts 1-7

1)

  context LoyaltyAccount::points
  init: 0

  context CustomerCard::valid
  init: true

2)
  
  context LoyaltyProgram
  inv minServices: partners.deliveredServices->size() >= 1

3)
  
  context LoyaltyProgram::getServices(): Set(Services)
  body: partners.deliveredServices->asSet()

4)
  
  context LoyaltyProgram::getServices(pp: ProgramPartner): Set(Services)
  body:
        if partners->includes(pp)
        then pp.deliveredServices
        else Set{}
        endif

5)

  context Service
  inv burnVsEarn: pointsBurned <= pointsEarned
  
  -- We are assuming that the invarient set in the ProgramPartner applies only to the services collected by the ProgramPartner.
  context ProgramPartner
  inv burnVsEarn: deliveredServices->iterate(service: Service ; 
					     answer: Set(Service) = Set{} |
					     if service.pointsBurned <= service.pointsEarned then
						answer->including(service)
					     else
						answer
					     endif)

6)

  context LoyaltyProgram
  inv noAccount: partners.deliveredServices->forAll(
		 pointsEarned = 0 and pointsBurned = 0 )
		 implies Membership.account->isEmpty()

7)

  context Customer::birthday()
  pre: -- none
  post: age = age@pre + 1  